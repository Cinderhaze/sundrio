package ${model.type.packageName};

import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.Validator;
import javax.validation.ValidatorFactory;
import javax.validation.ValidationException;
import java.util.Set;
#foreach($i in $model.imports)
import $i.fullyQualifiedName;
#end

#class ($model)

#foreach ($f in $model.fields)
private final ${f.type.simpleName} ${f.name};
#end

#foreach ($c in ${model.constructors})
public ${c.returnType.className}(#foreach ($a in ${c.arguments}) ${a.type.simpleName} ${a.name} #if( $foreach.hasNext ),#end#end){
    ${c.attributes.get("BODY")}
}
#end

#foreach ($m in $model.methods)
public ${m.returnType.simpleName} ${m.name}(#foreach ($a in ${m.arguments}) ${a.type.simpleName} ${a.name} #if( $foreach.hasNext ),#end#end){
    ${m.attributes.get("BODY")}
}
#end

private <T> void validate(T item) {
    try {
        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        
        Set<ConstraintViolation<T>> violations = validator.validate(item);
        if (!violations.isEmpty()) {
            StringBuilder sb = new StringBuilder();
            sb.append("Constraint Violations:");
            for (ConstraintViolation violation : violations) {
                sb.append("\t").append(violation.getPropertyPath()).append(":").append(violation.getMessage()).append("\n");
            }
            throw new IllegalStateException(sb.toString());
        }
    } catch(ValidationException e) {
        //ignore
    }
}

#end    