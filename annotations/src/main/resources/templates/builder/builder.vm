package ${model.type.packageName};

import me.builder.Builder;

#class ($model)
    private final ${model.type.superClass.className} fluent;
    
    public ${model.type.className}() {
        this.fluent = this;
    }

    public ${model.type.className}(${model.type.superClass.className} fluent) {
        this.fluent = fluent;
    }
    
    public ${model.type.className}(${model.type.className} instance) {
        this();
#foreach($arg in $model.constructors.iterator().next().arguments)
        with${arg.nameCapitalized}(instance.${arg.getter}());
#end
    }
    
    public ${model.attributes.get("BUILDS")} build() {
       return new ${model.attributes.get("BUILDS")}( #foreach($arg in $model.constructors.iterator().next().arguments)fluent.${arg.getter}()#if( $foreach.hasNext ), #end#end );
    }

#end    
    