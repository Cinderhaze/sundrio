package ${model.packageName};

import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import javax.validation.Validation;
import javax.validation.Validator;
import javax.validation.ValidatorFactory;
import javax.validation.ValidationException;
import java.util.Set;
#foreach($i in $model.imports)
import $i.fullyQualifiedName;
#end

#class ($model)

#foreach($f in $model.properties)
    #field ($f)
#end

#foreach ($c in ${model.constructors})
    #method ($c)
    #foreach ($s in $c.block.statements)
        $s.toString()
    #end
#end

#end

#foreach ($m in $model.methods)
    #method ($m)
    #foreach ($s in $m.block.statements)
        $s.toString()
    #end
#end

#end

private <T> void validate(T item) {
    Validator validator = null;
    try {
        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        validator = factory.getValidator();
    } catch(ValidationException e) {
        //ignore
        return;
    }

    Set<ConstraintViolation<T>> violations = validator.validate(item);
    if (!violations.isEmpty()) {
        throw new ConstraintViolationException(violations);
    }
}
#end
